# pseudo is generated by [unlabel + load from 2ptsCons]
data_root = '/YOURPATH/data/CXR8/gt_and_pseudo/'

img_norm_cfg = dict(
    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(512, 512), keep_ratio=False),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(512, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=False),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]

Class = ('Aortic_enlargement', 'Cardiomegaly', 'Pulmonary_fibrosis', 'Pleural_thickening', 'Pleural_effusion', 'Lung_Opacity', 'Nodule_Mass', 'Others')

data = dict(
    samples_per_gpu=16,
    workers_per_gpu=16,
    train=dict(
        type='CocoDataset',

        # ------------------------------------- only box 5p/10p/20p/30p/40p/50p/100p -------------------------------------
        # ann_file='/YOURPATH/data/CXR/ClsAll8_cocoAnnWBF/20p/instances_trainBox.json',

        # --------------------------- 5p/10p/20p/30p/40p/50p + pseudo, baseline --------------------------
        # ann_file=data_root + 'train_LableBox_PseudoBox__exp1_stage1_data20p_2-3box_baseline.json',

        # --------------------------- 5p/10p/20p/30p/40p/50p + pseudo, unlabel load 2ptCons --------------------------
        # ann_file=data_root + 'train_LableBox_PseudoBox__exp4_stage1_data20p_1pts_Erase0_jit005_unlabelLossL2Loss50_2-3box_Load2ptsconsPth.json',

        img_prefix='/YOURPATH/data/CXR/VinBigDataTrain_jpg/',
        classes=Class,
        pipeline=train_pipeline),
    val=dict(
        type='CocoDataset',
        ann_file='/YOURPATH/data/CXR/ClsAll8_cocoAnnWBF/instances_val.json',
        img_prefix='/YOURPATH/data/CXR/VinBigDataTrain_jpg/',
        classes=Class,
        pipeline=test_pipeline),
    test=dict(
        type='CocoDataset',
        ann_file='/YOURPATH/data/CXR/ClsAll8_cocoAnnWBF/instances_val.json',
        img_prefix='/YOURPATH/data/CXR/VinBigDataTrain_jpg/',
        classes=Class,
        pipeline=test_pipeline))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(
    type='SGD',
    lr=0.01,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(bias_lr_mult=2.0, bias_decay_mult=0.0))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='step',
    warmup='constant',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
model = dict(
    type='FCOS',
    pretrained='/YOURPATH/models/mmdet-rsna/resnet50_caffe-788b5fa3.pth',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs=True,
        extra_convs_on_inputs=False,
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='FCOSHead',
        num_classes=8,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='IoULoss', loss_weight=1.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0,
            ignore_iof_thr=-1),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
work_dir = 'xxx'
gpu_ids = range(0, 1)
